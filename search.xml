<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Gmaps:轻松集成Google Maps的Jupyter Notebook插件]]></title>
      <url>http://www.waverley.me/2016/12/21/Gmaps-%E8%BD%BB%E6%9D%BE%E9%9B%86%E6%88%90Google%20Maps%E7%9A%84Jupyter%20Notebook%E6%8F%92%E4%BB%B6/</url>
      <content type="text"><![CDATA[Gmaps是一个嵌入了Google Mpas的jupyter插件，是一个强大的数据可视化工具. Gmaps可以让你很简单地调用Google Maps，本文将简单介绍Gmaps的入门知识,以及有关热力图的绘制。 安装 最新版本的Gmaps需要升级你的IPython到4.2及以上版本 1pip install -U jupyter 用pip命令进行模块安装，并使jupyter加载 12pip install gmapsjupyter nbextension enable --py gmaps 申请API Key 要通过Google Maps的认证，你首先需要申请一个API Key，申请连接。进入申请界面，创建工程，然后点击凭证，选择API密钥，如下图 获取API Key之后，通过如下函数来进行配置 1gmaps.configure(api_key=&quot;AI...&quot;) 或者，通过环境变量来进行设置（文件 ~/.profile 或 ~/.bashrc） 1export GOOGLE_API_KEY=AI... 然后，在jupyter中通过如下方式使用 123import osimport gmapsgmaps.configure(api_key=os.environ[&quot;GOOGLE_API_KEY&quot;]) 这样，Maps和图层就可以通过你的API key来进行认证； 开始使用Gmaps是一个嵌入了Google Mpas的jupyter插件，是一个数据可视化工具。首先，让我们来画一个地震分布图：12345678910111213import gmapsimport gmaps.datasetsgmaps.configure(api_key=&quot;AI...&quot;) # Fill in with your API keyearthquake_data = gmaps.datasets.load_dataset(&quot;earthquakes&quot;)print(earthquake_data[:4]) # first four rows#在Google Mpas上画出地震分布图m = gmaps.Map()m.add_layer(gmaps.WeightedHeatmap(data=earthquake_data))m 这是一个完整的Google Maps，你可以放大缩小、卫星视图、街景等，并且热力图将会自适应。 基本原理gmaps是在原生Google Maps上添加一个图层；当你创建一个基本地图后，然后你可以在地图上增加一个新的图层，例如热力图层：1234567891011import gmapsgmaps.configure(api_key=&quot;AI...&quot;)m = gmaps.Map()# 初始化一些数据data = [(51.5, 0.1), (51.7, 0.2), (51.4, -0.2), (51.49, 0.1)]heatmap_layer = gmaps.Heatmap(data=data)m.add_layer(heatmap_layer)m 你还可以通过一些参数来调整图层，如下两种方式是等价的：12heatmap_layer = gmaps.Heatmap(data=data)heatmap_layer.point_radius = 8 和1heatmap_layer = gmaps.Heatmap(data=data, point_radius=8) 第一种可在图层已经建立之后，通过调整参数来动态调整图层； 热力图热力图是一种很好的描述特定地理位置的某一事件集中程度的方法，是一个可以展示大量数据信息的强大工具。例如，我们将1997年到2015年之间发生在非洲的110,000 起暴力事件展示出来;12345678910import gmapsimport gmaps.datasetsgmaps.configure(&quot;AI...&quot;)m = gmaps.Map()data = gmaps.datasets.load_dataset(&quot;acled_africa.csv&quot;)heatmap_layer = gmaps.Heatmap(data=data)m.add_layer(heatmap_layer)m 缩放热散当你在放大或缩小地图时，热力点可能会消失，这时你可以用max_intensity（最大峰值强度）参数来进行设置，当你的数据有明显的峰值时，这个参数是非常有用的；这个值通常配合point_radius（点半径）参数一起来进行调整，直到调整到你以为合适的数值：12heatmap_layer.max_intensity = 100heatmap_layer.point_radius = 5 Google maps还提供了一个dissipating参数（默认为true），当为true时，每个点的影响半径与缩放级别相关；当为false时，每个点覆盖的物理半径保持不变； 设置颜色梯度和不透明度Gmaps可以通过一个颜色列表来进行颜色梯度的设置，并且Google maps将会自动在相邻颜色间进行插值，颜色设置可以这样 12345heatmap.gradient = [ &apos;white&apos;, &apos;silver&apos;, &apos;gray&apos;] 或者RGB/RGBA元组12345heatmap.gradient = [ (200, 200, 200, 0.6), (100, 100, 100, 0.3), (50, 50, 50, 0.3)] 还可以通过opacity参数来调整热力图层的不透明度。 权重热力图权重热力图与热力图一样，仅仅是多了数据元组中多了权重项(latitude, longitude, weight)；由于Google Maps的限制，权重项必须是正值； 其他功能 Gmaps插件的功能远不止这些，以上仅仅介绍了有关热力图部分，更多功能等待大家去学习。 项目源码见我的github。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Jupyter Notebook：交互计算工具]]></title>
      <url>http://www.waverley.me/2016/11/04/Jupyter%20Notebook%EF%BC%9A%E4%BA%A4%E4%BA%92%E8%AE%A1%E7%AE%97%E5%B7%A5%E5%85%B7/</url>
      <content type="text"><![CDATA[Jupyter Notebook，一个web界面的vim+跨平台+即时运行结果的强大online编辑器。 Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言如Python, R, Julia and Scala。Jupyter Notebook是一个基于WEB的程序，可以用于数据清洗和转换，数值模拟，统计建模，机器学习，数据科学等。 支持运行 超过40种编程语言，如Python, R, Julia and Scala 可用多种方式进行分享，如email, Dropbox, GitHub and the Jupyter Notebook Viewer 可产生丰富的输出，并可以进行可视化实时操作，如图像, 视频, LaTeX, and JavaScript 使用大数据工具Apache Spark，pandas, scikit-learn, ggplot2, dplyr等 一、安装Jupyter NotebookJupyter可以运行多种编程语言，然而Jupyter Notebook的安装依赖于Python（Python 2.7，Python 3.3或更高）。官方推荐用 Anaconda 进行Python和Jupyter的安装。1、下载相应平台的Anaconda并按指示进行安装；2、运行一下命令，启动Jupyter Notebook1jupyter notebook 对于Python用户，也可用pip进行Jupyter Notebook 的安装1、更新pip到最新版本1pip install --upgrade pip 2、使用如下命令安装1pip install jupyter 3、运行命令，启动Jupyter Notebook1jupyter notebook 运行上面的命令之后，你将看到类似下面这样的输出： 启动jupyter notebook后默认监听于本地8888，如果想外部访问也很简单jupyternotebook–ip=x.x.x.x 这样，任何知道 notebook 地址的人都可以连接到 notebook 进行远程使用。 二、使用Jupyter Notebook会在你开启 notebook 的文件夹中启动 Jupyter 主界面，如下：如果想新建一个 notebook，只需要点击New，选择你希望启动的 notebook 类型即可（这里我只安装了一个python内核）；在新打开的标签页中，我们会看到 notebook 界面，目前里面什么也没有：下方截图中看到的是一个代码单元格（code cell），以[ ]开头。在这种类型的单元格中，可以输入任意代码并执行，类似一个在线的Python交互界面。例如，输入1 + 2并按下Shift + Enter；之后，单元格中的代码就会被计算，光标也会被移动动一个新的单元格中，你会得到如下结果：再次输入：1print(&quot;Hello Jupyter!&quot;) 得到下图结果，但这次没有出现类似Out2这样的文字。这是因为我们将结果打印出来了，没有返回任何的值： notebook 有一个非常有趣的特性，就是可以修改之前的单元格，对其重新计算，这样就可以更新整个文档了。试着把光标移回第一个单元格，并将1 + 2修改成2 + 3，然后按下Shift + Enter重新计算该单元格。你会发现结果马上就更新成了 5。如果你不想重新运行整个脚本，只想用不同的参数测试某个程式的话，这个特性显得尤其强大。不过，你也可以重新计算整个 notebook，只要点击Cell -&gt; Run all即可。 Jupyter Notebook的功能显然不止这些，还支持Markdown、LaTex 语法等，可用来编辑在线文档； 三、导出功能Jupyter Notebook还有一个强大的特性，就是其导出功能。可以将 notebook 导出为多种格式： HTML Markdown ReST PDF（通过 LaTeX） Raw Python 导出 PDF 功能，可以让你不用写 LaTex 即可创建漂亮的 PDF 文档。你还可以将 notebook 作为网页发布在你的网站上。甚至，你可以导出为 ReST 格式，作为软件库的文档。 四、Notebook WidgetsJupyter Notebook集成了多种部件，如gmaps，Matplotlib等Gmaps是一个数据可视化工具，是Jupyter Notebook的一个嵌入了Google Maps的插件。这里我们才刚刚进入正题：敬请关注《Gmaps:轻松集成Google Maps的Jupyter Notebook插件》先贴一张图(地震分部热力图)：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Git入门手册]]></title>
      <url>http://www.waverley.me/2016/10/26/Git%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/</url>
      <content type="text"><![CDATA[同生活中的许多伟大事件一样，Git 诞生于一个极富纷争大举创新的年代。 Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git是目前世界上最先进的分布式版本控制系统（没有之一），将Git有关命令记录如下。 安装git 1sudo apt-get install git 配置git信息12git config --global user.name &quot;waverley&quot;git config --global user.email &quot;XXX&quot; 初始化一个项目,所有文件都在目录waverley之下12345678#你可以计划改动(把它们添加到缓存区),使用如下命令:git add waverleygit add *git rm filegit rm -r dir#这是 git 基本工作流程的第一步;使用如下命令以实际提交改动:git commit -m &quot;代码提交信息&quot;#现在,你的改动已经提交到了 HEAD,但是还没到你的远端仓库。 检查都做了哪些修改123git diff #只能查到git add之前的修改文件git diff --cached #可以查到git commit之前的文件git status #查看git commit之前都有哪些文件发生了改动 查看提交日志12git loggit log -p #可以查看详细的日志 查看操作记录1git reflog 创建并管理分支12345git branch waverley #创建一个叫waverley的分支git branch #显示当前都有哪些分支,其中标注*为当前所在分支git checkout waverley #将当前分支转移到 waverley 分支git commit -a #提交分支git merge waverley #将waverley合并到主分支 克隆一个远程仓库到本地1git clone remote_path local_path 推送改动12345#你的改动现在已经在本地仓库的 HEAD中了。执行如下命令以将这些改动提交到远端仓库:git push origin master#可以把 master 换成你想要推送的任何分支。如果你还没有克隆现有仓库,并欲将你的仓库连接到某个远程服务器,你可以使用如下命令添加:git remote add origin &lt;server&gt;;#如此你就能够将你的改动推送到所添加的服务器上去了。 分支分支是用来将特性开发绝缘开来的。在你创建仓库的时候,master是“默认的”。在其他分支上进行开发,完成后再将它们合并到主分支上。创建一个叫做“feature_x”的分支,并切换过去:1git checkout -b feature_x 切换回主分支：1git checkout master 再把新建的分支删掉1git branch -d feature_x 除非你将分支推送到远端仓库，不然该分支就是不为他人所见的：1git push origin 更新与合并要更新你的本地仓库至最新改动，执行：1git pull 相当于在你的工作目录中，获取(fetch) 并 合并(merge) 远端的改动。要合并其他分支到你的当前分支(例如 master),执行:1git merge 这两种情况下,git 都会尝试去自动合并改动。不幸的是,自动合并并非次次都能成功,并可能导致冲突(conflicts)。 这时候就需要你修改这些文件来人肉合并这些冲突了。改完之后,你需要执行如下命令以将它们标记为合并成功:1git add 在合并改动之前,也可以使用如下命令查看:1git diff 标签在软件发布时创建标签,是被推荐的。这是个旧有概念,在SVN中也有。可以执行如下命令以创建一个叫做 1.0.0 的标签:1git tag 1.0.0 1b2e1d63ff 1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID:1git log 你也可以用该提交 ID 的少一些的前几位,只要它是唯一的。 回退回退本地修改假如你做错事(自然,这是不可能的),你可以使用如下命令替换掉本地改动:1git checkout -- 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件;已添加到缓存区的改动,以及新文件,都不受影响。 回退远端修改假如你想要丢弃你所有的本地改动与提交,可以到服务器上获取最新的版本并将你本地主分支指向到它:12git fetch origingit reset --hard origin/master 总结git是一个很好的版本管理工具，将常用命令总结如下图：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://www.waverley.me/2016/10/25/hello-world/</url>
      <content type="text"><![CDATA[Hello World 花了两天时间搭建了个博客，也算是有了一个属于自己的私有空间了。hexo+github+coding+markdown的方式使用起来也很方便，还申请了自己的域名waverley.me。 现在，我终于可以大声说：Hello World !]]></content>
    </entry>

    
  
  
</search>
